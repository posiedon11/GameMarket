

using GameMarketAPIServer.Configuration;
using MySqlConnector;
using System.Numerics;
using GameMarketAPIServer.Utilities;
using GameMarketAPIServer.Models.Enums;
using GameMarketAPIServer.Models;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;
using static SteamKit2.DepotManifest;
using System.Diagnostics;
using System.Windows.Input;
using Microsoft.Extensions.Options;
using static GameMarketAPIServer.Models.Database_structure;
using System.Collections.Concurrent;

namespace GameMarketAPIServer.Services
{

    public interface IDataBaseManager
    {
#if false
        Task EnqueueGameMarketQueueAsync(Tables table, TableData data, CRUD operation = CRUD.Read);
        Task EnqueueGameMarketQueueAsync(IEnumerable<Tables> tables, TableData data, CRUD operation = CRUD.Read);
        Task EnqueueSteamQueueAsync(Tables table, TableData data, CRUD operation = CRUD.Read);
        Task EnqueueSteamQueueAsync(IEnumerable<Tables> tables, TableData data, CRUD operation = CRUD.Read);
        Task EnqueueXboxQueueAsync(Tables table, TableData data, CRUD operation = CRUD.Read);
        Task EnqueueXboxQueueAsync(IEnumerable<Tables> tables, TableData data, CRUD operation = CRUD.Read); 
#endif

        Task EnqueQueueAsync(DBTable table, ITableData data, CRUD operation = CRUD.Read);
        Task EnqueQueueAsync(IEnumerable<DBTable> tables, ITableData data, CRUD operation = CRUD.Read);

        Task processQueues(DBSchema schema);
        Task processQueues(IEnumerable<DBSchema>? schemas = null);
        Task processQueue(DBSchema schema);


#if false
        Task processGameMarketQueueAsync();
        Task processSteamQueueAsync();
        Task processXboxQueueAsync();

        Task<bool> validTableAsync(Tables table); 
#endif
        Task<bool> validTableAsync(DBTable table);

        public string connectionString { get; set; }

    }

    public class DataBaseManager : IDataBaseManager
    {
        private ILogger<DataBaseManager> logger;
        protected MainSettings mainSettings;
        protected SQLServerSettings sqlserverSettings;
        public string connectionString { get; set; }
        private readonly Queue<(Tables, ITableData, CRUD)> xboxQueue = new Queue<(Tables, ITableData, CRUD)>();
        private readonly Queue<(Tables, ITableData, CRUD)> steamQueue = new Queue<(Tables, ITableData, CRUD)>();
        private readonly Queue<(Tables, ITableData, CRUD)> gameMarketQueue = new Queue<(Tables, ITableData, CRUD)>();

        //private readonly Queue<(DBTable, TableData, CRUD)> dbQueue = new Queue<(DBTable, TableData, CRUD)>();
        private readonly ConcurrentDictionary<DBSchema, Queue<(DBTable, ITableData, CRUD)>> dbQueue = new ConcurrentDictionary<DBSchema, Queue<(DBTable, ITableData, CRUD)>>();

        private readonly SemaphoreSlim xboxQueueLock = new SemaphoreSlim(1, 1);
        private readonly SemaphoreSlim steamQueueLock = new SemaphoreSlim(1, 1);
        private readonly SemaphoreSlim gameMarketQueueLock = new SemaphoreSlim(1, 1);
        private readonly ConcurrentDictionary<DBSchema, SemaphoreSlim> dbQueueLocks = new ConcurrentDictionary<DBSchema, SemaphoreSlim>();

        private List<Tables> foundTables = new List<Tables>();

        private List<DBTable> foundTables1 = new List<DBTable>();

        public enum Schemas
        {
            xbox,
            steam,
            gamemarket
        }


        public DataBaseManager(IOptions<MainSettings> settings, ILogger<DataBaseManager> logger)
        {
            this.logger = logger;
            mainSettings = settings.Value;
            sqlserverSettings = settings.Value.sqlServerSettings;

            connectionString = "Server=" + sqlserverSettings.serverName + ";Port=" + sqlserverSettings.serverPort + ";User=" + sqlserverSettings.serverUserName + ";Password=" + sqlserverSettings.serverPassword + ";";
        }


        #region QueueManagement

        public async Task EnqueueGameMarketQueueAsync(Tables table, ITableData data, CRUD operation = CRUD.Read)
        {
            await EnqueueGameMarketQueueAsync([table], data, operation);
        }
        public async Task EnqueueGameMarketQueueAsync(IEnumerable<Tables> tables, ITableData data, CRUD operation = CRUD.Read)
        {
            await gameMarketQueueLock.WaitAsync();
            try
            {
                foreach (Tables table in tables)
                    gameMarketQueue.Enqueue((table, data, operation));
            }
            finally
            {
                gameMarketQueueLock.Release();
            }
        }


        public async Task EnqueueSteamQueueAsync(Tables table, ITableData data, CRUD operation = CRUD.Read)
        {
            await EnqueueSteamQueueAsync([table], data, operation);
        }
        public async Task EnqueueSteamQueueAsync(IEnumerable<Tables> tables, ITableData data, CRUD operation = CRUD.Read)
        {
            await steamQueueLock.WaitAsync();
            try
            {
                foreach (Tables table in tables)
                    steamQueue.Enqueue((table, data, operation));
            }
            finally
            {
                steamQueueLock.Release();
            }
        }


        public async Task EnqueueXboxQueueAsync(Tables table, ITableData data, CRUD operation = CRUD.Read)
        {
            await EnqueueXboxQueueAsync([table], data, operation);
        }
        public async Task EnqueueXboxQueueAsync(IEnumerable<Tables> tables, ITableData data, CRUD operation = CRUD.Read)
        {
            await xboxQueueLock.WaitAsync();
            try
            {
                foreach (Tables table in tables)
                    xboxQueue.Enqueue((table, data, operation));
            }
            finally
            {
                xboxQueueLock.Release();
            }
        }

        public async Task EnqueQueueAsync(DBTable table, ITableData data, CRUD operation = CRUD.Read)
        {
            await EnqueQueueAsync([table], data, operation);
        }
        public async Task EnqueQueueAsync(IEnumerable<DBTable> tables, ITableData data, CRUD operation = CRUD.Read)
        {

            async Task SafeEnqueueAsync(DBTable table)
            {

                try
                {
                    var schema = table.getSchema();
                    var queue = dbQueue.GetOrAdd(schema, _ => new Queue<(DBTable, ITableData, CRUD)>());
                    lock (queue)
                    {
                        queue.Enqueue((table, data, operation));
                    }
                }
                catch (Exception ex)
                {
                    logger.LogError(ex.ToString());
                }
            }
            try
            {
                var enqueueTasks = tables.Select(table => SafeEnqueueAsync(table));
                await Task.WhenAll(enqueueTasks);

            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message);
            }
        }


        private SemaphoreSlim GetCreateSemaphore(DBSchema schema)
        {
            if (!dbQueueLocks.TryGetValue(schema, out SemaphoreSlim? semaphore))
            {
                semaphore = new SemaphoreSlim(1, 1);
                dbQueueLocks[schema] = semaphore;
            }
            return semaphore;
        }

        public async Task processQueues(IEnumerable<DBSchema>? schemas = null)
        {
            if (schemas == null)
            {
                foreach (var schema in dbQueue.Keys ?? [])
                {
                    await processQueue(schema);
                }
            }
            else
            {
                foreach (var schema in schemas)
                {
                    await processQueue(schema);
                }
            }
        }
        public async Task processQueues(DBSchema schema)
        {
            await processQueues([schema]);
        }
        public async Task processQueue(DBSchema schema)
        {
            try
            {
                using var connection = new MySqlConnection(connectionString);
                await connection.OpenAsync();

                var queue = dbQueue[schema];
                while (queue.Any())
                {
                    try
                    {
                        (DBTable, ITableData, CRUD) queueData;
                        lock (queue)
                        {
                            queueData = queue.Dequeue();
                        }

                        var table = queueData.Item1;
                        var data = queueData.Item2;
                        switch (queueData.Item3)
                        {
                            case CRUD.Create:
                                {
                                    await InsertIntoTableAsync(table, data, connection);
                                    break;
                                }
                            case CRUD.Read:
                                {
                                    break;
                                }
                            case CRUD.Update:
                                {
                                    await UpdateTableAsync(table, data, connection);
                                    break;
                                }
                            case CRUD.Delete:
                                {
                                    break;
                                }
                        }

                    }
                    catch (Exception ex)
                    {
                        logger.LogError(ex.ToString());
                    }
                }

                await connection.CloseAsync();
            }

            catch (Exception ex)
            {
                logger.LogError(ex.ToString());
            }
        }
        public async Task processSteamQueueAsync()
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();
            while (steamQueue.Any())
            {
                try
                {
                    await steamQueueLock.WaitAsync();
                    var queueData = steamQueue.Dequeue();
                    steamQueueLock.Release();
                    var table = queueData.Item1;
                    var data = queueData.Item2;

                    switch (queueData.Item3)
                    {
                        case CRUD.Create:
                            {
                                await InsertIntoTableAsync(table, data, connection);
                                break;
                            }
                        case CRUD.Read:
                            {
                                break;
                            }
                        case CRUD.Update:
                            {
                                await UpdateTableAsync(table, data, connection);
                                break;
                            }
                        case CRUD.Delete:
                            {
                                break;
                            }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                    throw;
                }

            }
        }

        public async Task processGameMarketQueueAsync()
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();
            while (gameMarketQueue.Any())
            {
                try
                {
                    await gameMarketQueueLock.WaitAsync();
                    var queueData = gameMarketQueue.Dequeue();
                    gameMarketQueueLock.Release();
                    var table = queueData.Item1;
                    var data = queueData.Item2;

                    switch (queueData.Item3)
                    {
                        case CRUD.Create:
                            {
                                await InsertIntoTableAsync(table, data, connection);
                                break;
                            }
                        case CRUD.Read:
                            {
                                break;
                            }
                        case CRUD.Update:
                            {
                                await UpdateTableAsync(table, data, connection);
                                break;
                            }
                        case CRUD.Delete:
                            {
                                break;
                            }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                    throw;
                }

            }
        }

        public async Task processXboxQueueAsync()
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();
            while (xboxQueue.Any())
            {
                try
                {
                    await xboxQueueLock.WaitAsync();
                    var queueData = xboxQueue.Dequeue();
                    xboxQueueLock.Release();
                    var table = queueData.Item1;
                    var data = queueData.Item2;

                    switch (queueData.Item3)
                    {
                        case CRUD.Create:
                            {
                                await InsertIntoTableAsync(table, data, connection);
                                break;
                            }
                        case CRUD.Read:
                            {
                                break;
                            }
                        case CRUD.Update:
                            {
                                await UpdateTableAsync(table, data, connection);
                                break;
                            }
                        case CRUD.Delete:
                            {
                                break;
                            }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                    throw;
                }

            }
        }

        #endregion


        #region TableEnum
        private async Task<bool> InsertIntoTableAsync(Tables table, ITableData data, MySqlConnection connection)
        {

            //using var transaction = await connection.BeginTransactionAsync();
            bool success = false;
            try
            {
                if (!await validTableAsync(table))
                {
                    //await transaction.RollbackAsync();
                    Console.WriteLine("Table not valid for insertion");
                    return false;
                }
                switch (table.ToSchema())
                {
                    case Schemas.xbox:
                        success = await InsertXbox(table, data, connection);
                        break;
                    case Schemas.steam:
                        success = await InsertSteam(table, data, connection);
                        break;
                    case Schemas.gamemarket:
                        success = await InsertGameMarket(table, data, connection);
                        break;
                    default:
                        break;
                }

                // await transaction.CommitAsync();
                return success;
            }
            catch (MySqlException ex)
            {
                Console.WriteLine("Failed to insert for: ");
                data.outputData();
                // Console.WriteLine("Sql Error: " + ex.ToString());
                return false;
            }
            catch (Exception ex)
            {
                // If something goes wrong, roll back the transaction
                //await transaction.RollbackAsync();
                Console.WriteLine(ex.ToString());
                throw;
            }
        }

        private async Task<bool> UpdateTableAsync(Tables table, ITableData data, MySqlConnection connection)
        {
            //using var transaction = await connection.BeginTransactionAsync();
            bool success = false;
            try
            {

                if (!await validTableAsync(table))
                {
                    //await transaction.RollbackAsync();
                    return success;
                }

                switch (table.ToSchema())
                {
                    case Schemas.xbox:
                        success = await UpdateXbox(table, data, connection);
                        break;
                    case Schemas.steam:
                        success = await UpdateSteam(table, data, connection);
                        break;
                    case Schemas.gamemarket:
                        success = await UpdateGameMarket(table, data, connection);
                        break;
                    default:
                        break;
                }
                // await transaction.CommitAsync();
                return success;
            }
            catch (MySqlException ex)
            {
                Console.WriteLine("Update failed for: ");
                data.outputData();
                return false;
            }
            catch (Exception ex)
            {
                // If something goes wrong, roll back the transaction
                //await transaction.RollbackAsync();
                Console.WriteLine(ex.ToString());

                throw;
            }
        }


        private async Task<bool> InsertXbox(Tables table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;
                switch (table)
                {
                    case Tables.XboxUserProfiles:
                        {
                            break;
                        }
                    case Tables.XboxGameTitles:
                        {
                            if (data is XboxGameTitleData titleData)
                            {

                                string sqlQuery = $@"INSERT INTO  {Schemas.xbox}.{table.To_String()} 
                                 (titleID, titleName, displayImage, modernTitleID, isGamePass) 
                                 VALUES(@titleID, @titleName, @displayImage, @modernTitleID, @isGamePass) 
                                 ON DUPLICATE KEY UPDATE titleName = VALUES(titleName), displayImage = VALUES(displayImage), isGamePass = VALUES(isGamePass)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"titleID", titleData.titleID);
                                    command.Parameters.AddWithValue($"titleName", titleData.titleName);
                                    command.Parameters.AddWithValue($"displayImage", titleData.displayImage);
                                    command.Parameters.AddWithValue($"modernTitleID", titleData.modernTitleID);
                                    command.Parameters.AddWithValue($"isGamePass", titleData.isGamePass);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxTitleDevices:
                        {
                            if (data is XboxGameTitleData titleData)
                            {

                                //Delete all devices for id
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from  {Schemas.xbox}.{table.To_String()} where modernTitleId = @modernTitleId";
                                    command.Parameters.AddWithValue($"modernTitleId", titleData.modernTitleID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery = $@"INSERT INTO {Schemas.xbox}.{table.To_String()} 
                                 (modernTitleID, device) 
                                 VALUES(@modernTitleID, @device) 
                                 ON DUPLICATE KEY UPDATE modernTitleID = VALUES(modernTitleID), device = VALUES(device)";

                                foreach (var device in titleData.devices)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"modernTitleID", titleData.modernTitleID);
                                        command.Parameters.AddWithValue($"device", device);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxProductIds:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {
                                string sqlQuery = $@"INSERT INTO {Schemas.xbox}.{table.To_String()} 
                                 (productID) 
                                 VALUES(@productID) 
                                 ON DUPLICATE KEY UPDATE productID = VALUES(productID)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }

                                foreach (var bundleID in titleData.bundleIDs)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"productID", bundleID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxTitleDetails:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {
                                string sqlQuery = $@"INSERT INTO {Schemas.xbox}.{table.To_String()} 
                                 (modernTitleID, productID) 
                                 VALUES(@modernTitleID, @productID) 
                                 ON DUPLICATE KEY UPDATE modernTitleID = VALUES(modernTitleID), productID = VALUES(productID)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"modernTitleID", titleData.modernTitleID);
                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxGameBundles:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {
                                //remove all bundles for ID
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {Schemas.xbox}.{table.To_String()} where productID = @productID";

                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery = $@"INSERT INTO {Schemas.xbox}.{table.To_String()} 
                                 (relatedProductID, productID) 
                                 VALUES(@relatedProductID, @productID) On Duplicate key update productID = Values(productID)";

                                //insert new bundles
                                foreach (var bundleID in titleData.bundleIDs)
                                {

                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"relatedProductID", bundleID);
                                        command.Parameters.AddWithValue($"productID", titleData.productID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxGameGenres:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {
                                string sqlQuery = $@"INSERT INTO {Schemas.xbox}.{table.To_String()} 
                                 (productID) 
                                 VALUES(@productID) 
                                 ON DUPLICATE KEY UPDATE productID = VALUES(productID)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }

                                foreach (var bundleID in titleData.bundleIDs)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"productID", bundleID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxGroupData:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {

                                string sqlQuery = $@"INSERT INTO {Schemas.xbox}.{table.To_String()}
                                 (groupID, groupName) 
                                 VALUES(@groupID, @groupName) 
                                 ON DUPLICATE KEY UPDATE groupName = VALUES(groupName)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"groupID", titleData.groupID);
                                    command.Parameters.AddWithValue($"groupName", titleData.groupName);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxMarketDetails:
                        {
                            if (data is XboxGameMarketData marketData)
                            {
                                string sqlQuery = $@"INSERT INTO {Schemas.xbox}.{table.To_String()} 
                                 (productID, productTitle, developerName, publisherName, currencyCode, purchasable, posterImage, msrp, listPrice, startDate, endDate) 
                                 VALUES(@productID,@productTitle, @developerName,@publisherName,@currencyCode,@purchasable,@posterImage,@msrp,@listPrice,@startDate,@endDate) 
                                 ON DUPLICATE KEY UPDATE productTitle = VALUES(productTitle), 
                                 developerName = VALUES(developerName), publisherName = VALUES(publisherName), currencyCode = VALUES(currencyCode), purchasable = VALUES(purchasable), 
                                 posterImage = VALUES(posterImage), msrp = VALUES(msrp), listPrice = VALUES(listPrice), startDate = VALUES(startDate), endDate = VALUES(endDate)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;


                                    //They should all have this
                                    command.Parameters.AddWithValue($"productID", marketData.productID);
                                    command.Parameters.AddWithValue($"productTitle", marketData.productTitle);
                                    command.Parameters.AddWithValue($"developerName", marketData.devName);
                                    command.Parameters.AddWithValue($"publisherName", marketData.pubName);
                                    command.Parameters.AddWithValue($"startDate", marketData.startDate);
                                    command.Parameters.AddWithValue($"endDate", marketData.endDate);
                                    command.Parameters.AddWithValue($"purchasable", marketData.purchasable);
                                    command.Parameters.AddWithValue($"posterImage", marketData.posterImage);

                                    if (marketData.purchasable)
                                    {
                                        command.Parameters.AddWithValue($"msrp", marketData.msrp);
                                        command.Parameters.AddWithValue($"listPrice", marketData.ListPrice);
                                        command.Parameters.AddWithValue($"currencyCode", marketData.currencyCode);
                                    }
                                    else
                                    {
                                        command.Parameters.AddWithValue($"msrp", null);
                                        command.Parameters.AddWithValue($"listPrice", null);
                                        command.Parameters.AddWithValue($"currencyCode", null);
                                    }

                                    await command.ExecuteNonQueryAsync();
                                }

                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxProductPlatforms:
                        {
                            if (data is XboxGameMarketData titleData)
                            {
                                //remove all bundles for ID
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {Schemas.xbox}.{table.To_String()} where productID = @productID";

                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery = $@"INSERT INTO {Schemas.xbox}.{table.To_String()} 
                                 (productID, platform) 
                                 VALUES(@productId, @platform) On Duplicate key update platform = Values(platform)";

                                //insert new bundles
                                foreach (var platform in titleData.platforms)
                                {

                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"platform", platform);
                                        command.Parameters.AddWithValue($"productID", titleData.productID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }


                    default:
                        logger.LogWarning($"DB insert not Implemented for {table.ToString()}");
                        break;

                }

                return success;
            }
            catch (MySqlException ex) { return false; }
        }
        private async Task<bool> InsertSteam(Tables table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;
                switch (table)
                {
                    case Tables.SteamAppIDs:
                        {
                            if (data is SteamAppListData appListData)
                            {


                                string sqlQuery = $@"INSERT INTO {Schemas.steam}.{table.To_String()}
                                 (appID) 
                                 VALUES(@appID) 
                                 ON DUPLICATE KEY UPDATE appID = VALUES(appID)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"appID", appListData.appid);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.SteamAppDetails:
                        {
                            if (data is SteamAppDetailsData appDetailsData)
                            {


                                string sqlQuery = $@"INSERT INTO {Schemas.steam}.{table.To_String()} 
                                 (appID, appType,appName,msrp,listprice,isFree) 
                                 VALUES(@appID, @appType,@appName,@msrp,@listprice,@isFree) 
                                 ON DUPLICATE KEY UPDATE appType = VALUES(appType), appName = VALUES(appName), msrp = VALUES(msrp), listprice = VALUES(listprice), isFree = VALUES(isFree)  ";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"appID", appDetailsData.appID);
                                    command.Parameters.AddWithValue($"appType", appDetailsData.appType);
                                    command.Parameters.AddWithValue($"appName", appDetailsData.appName);
                                    if (!appDetailsData.isFree)
                                    {
                                        command.Parameters.AddWithValue($"listprice", appDetailsData.listprice);
                                        command.Parameters.AddWithValue($"msrp", appDetailsData.msrp);
                                    }
                                    else
                                    {
                                        command.Parameters.AddWithValue($"listprice", null);
                                        command.Parameters.AddWithValue($"msrp", null);
                                    }
                                    command.Parameters.AddWithValue($"isFree", appDetailsData.isFree);

                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.SteamPackageIDs:
                        {
                            if (data is SteamAppDetailsData appDetailsData)
                            {
                                string sqlQuery = $@"INSERT INTO {Schemas.steam}.{table.To_String()} 
                                 (packageID) 
                                 VALUES(@packageID) 
                                 ON DUPLICATE KEY UPDATE packageID = VALUES(packageID)";

                                foreach (var package in appDetailsData.packages)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"packageID", package);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.SteamPackages:
                        {
                            if (data is SteamAppDetailsData appDetailsData)
                            {

                                //remove all packages for ID
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {Schemas.steam}.{table.To_String()} where appID = @appID";

                                    command.Parameters.AddWithValue($"appID", appDetailsData.appID);
                                    await command.ExecuteNonQueryAsync();
                                }

                                string sqlQuery = $@"INSERT INTO {Schemas.steam}.{table.To_String()}
                                 (appID, packageID) 
                                 VALUES(@appID, @packageID) 
                                 ON DUPLICATE KEY UPDATE appID = VALUES(appID)";

                                foreach (var package in appDetailsData.packages)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"appID", appDetailsData.appID);
                                        command.Parameters.AddWithValue($"packageID", package);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }

                                success = true;
                            }
                            break;
                        }
                    case Tables.SteamAppDevelopers:
                        {
                            if (data is SteamAppDetailsData appDetailsData)
                            {
                                string sqlQuery = $@"INSERT INTO {Schemas.steam}.{table.To_String()} 
                                 (appID, developer) 
                                 VALUES(@appID, @developer) 
                                 ON DUPLICATE KEY UPDATE appID = VALUES(appID), developer = Values(developer)";

                                foreach (var developer in appDetailsData.developers)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"appID", appDetailsData.appID);
                                        command.Parameters.AddWithValue($"developer", developer);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.SteamAppPublishers:
                        {
                            if (data is SteamAppDetailsData appDetailsData)
                            {

                                string sqlQuery = $@"INSERT INTO {Schemas.steam}.{table.To_String()}
                                 (appID, publisher) 
                                 VALUES(@appID, @publisher) 
                                 ON DUPLICATE KEY UPDATE appID = VALUES(appID), publisher = Values(publisher)";

                                foreach (var publisher in appDetailsData.publishers)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"appID", appDetailsData.appID);
                                        command.Parameters.AddWithValue($"publisher", publisher);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.SteamAppPlatforms:
                        {
                            if (data is SteamAppDetailsData appDetailsData)
                            {

                                //remove all packages for ID
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {Schemas.steam}.{table.To_String()} where appID = @appID";
                                    command.Parameters.AddWithValue($"appID", appDetailsData.appID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery = $@"INSERT INTO {Schemas.steam}.{table.To_String()} 
                                 (appID, platform) 
                                 VALUES(@appID, @platform) 
                                 ON DUPLICATE KEY UPDATE appID = VALUES(appID), platform = VAlUES(platform)";

                                foreach (var platform in appDetailsData.platforms)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"appID", appDetailsData.appID);
                                        command.Parameters.AddWithValue($"platform", platform);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.SteamAppGenres:
                        {
                            if (data is SteamAppDetailsData appDetailsData)
                            {
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {Schemas.steam}.{table.To_String()}  where appID = @appID";

                                    command.Parameters.AddWithValue($"appID", appDetailsData.appID);
                                    await command.ExecuteNonQueryAsync();
                                }

                                string sqlQuery = $@"INSERT INTO {Schemas.steam}.{table.To_String()}
                                 (appID, genre) 
                                 VALUES(@appID, @genre) 
                                 ON DUPLICATE KEY UPDATE appID = VALUES(appID), genre = VALUES(genre)";

                                foreach (var genre in appDetailsData.genres)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"appID", appDetailsData.appID);
                                        command.Parameters.AddWithValue($"genre", genre);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }

                    default:
                        logger.LogWarning($"DB insert not Implemented for {table.ToString()}");
                        break;
                }



                return success;

            }
            catch (MySqlException ex) { return false; }
        }
        private async Task<bool> InsertGameMarket(Tables table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;

                switch (table)
                {
                    case Tables.GameMarketGameTitles:
                        {
                            if (data is GameMarketMergedXboxData mergedData)
                            {

                                string sqlQuery = $@"INSERT INTO {Schemas.gamemarket}.{table.To_String()}
                                 (gameTitle) 
                                 VALUES(@gameTitle)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"gameTitle", mergedData.gameTitle);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.GameMarketXboxLink:
                        {
                            if (data is GameMarketMergedXboxData mergedData)
                            {
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {Schemas.gamemarket}.{table.To_String()} where gameId = @gameId";

                                    command.Parameters.AddWithValue($"gameId", mergedData.gameId);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery2 = $@"INSERT INTO {Schemas.gamemarket}.{table.To_String()}
                                 (gameID, modernTitleID) 
                                 VALUES(LAST_INSERT_ID(), @modernTitleID)";
                                string sqlQuery1 = $@"INSERT INTO {Schemas.gamemarket}.{table.To_String()}
                                 (gameID, modernTitleID) 
                                 VALUES(@gameID, @modernTitleID)";

                                foreach (var titleId in mergedData.xboxIds)
                                {
                                    if (mergedData.gameId >= 1000)
                                    {
                                        using (var command = new MySqlCommand())
                                        {
                                            command.Connection = connection;
                                            command.CommandText = sqlQuery1;
                                            command.Parameters.AddWithValue($"gameID", mergedData.gameId);
                                            command.Parameters.AddWithValue($"modernTitleID", titleId);
                                            await command.ExecuteNonQueryAsync();
                                        }
                                    }
                                    else
                                    {
                                        using (var command = new MySqlCommand())
                                        {
                                            command.Connection = connection;
                                            command.CommandText = sqlQuery2;
                                            command.Parameters.AddWithValue($"modernTitleID", titleId);
                                            await command.ExecuteNonQueryAsync();
                                        }
                                    }

                                }
                                success = true;
                            }
                            break;
                        }

                    default:
                        logger.LogWarning($"DB insert not Implemented for {table.ToString()}");
                        break;
                }


                return success;

            }
            catch (MySqlException ex) { return false; }
        }


        private async Task<bool> UpdateXbox(Tables table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;
                switch (table)
                {
                    case Tables.XboxUserProfiles:
                        {
                            if (data is XboxUpdateScannedData updateData)
                            {
                                var tableCommand = new MySqlCommand("Use " + sqlserverSettings.xboxSchema + ";", connection);
                                await tableCommand.ExecuteNonQueryAsync();

                                string sqlQuery = $@"Update {Schemas.xbox}.{table.To_String()}
                                 set lastScanned = @lastScanned 
                                 where xuid = @xuid";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"xuid", updateData.ID);
                                    command.Parameters.AddWithValue($"lastScanned", updateData.lastScanned);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }

                            break;
                        }
                    case Tables.XboxGameTitles:
                        {
                            if (data is XboxTitleDetailsData titleDetailsData)
                            {
                                string sqlQuery = $@"Update {Schemas.xbox}.{table.To_String()} 
                                 set groupID = @groupID, lastScanned = @lastScanned 
                                 where modernTitleID = @modernTitleID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"groupID", titleDetailsData.groupID);
                                    command.Parameters.AddWithValue($"modernTitleID", titleDetailsData.modernTitleID);
                                    command.Parameters.AddWithValue($"lastScanned", titleDetailsData.lastScanned);

                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            else if (data is XboxUpdateScannedData updateData)
                            {

                                string sqlQuery = $@"Update {Schemas.xbox}.{table.To_String()}
                                 set lastScanned = @lastScanned 
                                 where modernTitleID = @modernTitleID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"modernTitleID", updateData.ID);
                                    command.Parameters.AddWithValue($"lastScanned", updateData.lastScanned);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxProductIds:
                        {
                            if (data is XboxUpdateScannedData updateData)
                            {
                                string sqlQuery = $@"Update {Schemas.xbox}.{table.To_String()} 
                                     set lastScanned = @lastScanned
                                     where productID = @productID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"productID", updateData.ID);
                                    command.Parameters.AddWithValue($"lastScanned", updateData.lastScanned);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxTitleDetails:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {
                                string sqlQuery = $@"Update {Schemas.xbox}.{table.To_String()}
                                     set productID = @productID 
                                     where modernTitleID = @modernTitleID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"modernTitleID", titleData.modernTitleID);
                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxGameBundles:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {
                                //remove all bundles for ID
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {Schemas.xbox}.{table.To_String()} where productID = @productID";

                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery = @"INSERT INTO {Schemas.xbox}.{table.To_String()} 
                                 (relatedProductID, productID) 
                                 VALUES(@relatedProductID, @productID) ";

                                //insert new bundles
                                foreach (var bundleID in titleData.bundleIDs)
                                {

                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"relatedProductID", bundleID);
                                        command.Parameters.AddWithValue($"productID", titleData.productID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxGameGenres:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {
                                string sqlQuery = $@"INSERT INTO {Schemas.xbox}.{table.To_String()} 
                                 (productID) 
                                 VALUES(@productID) 
                                 ON DUPLICATE KEY UPDATE productID = VALUES(productID)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }

                                foreach (var bundleID in titleData.bundleIDs)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;
                                        command.Parameters.AddWithValue($"productID", bundleID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.XboxGroupData:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {

                                string sqlQuery = $@"INSERT INTO {Schemas.xbox}.{table.To_String()}
                                 (groupID, groupName) 
                                 VALUES(@groupID, @groupName) 
                                 ON DUPLICATE KEY UPDATE groupName = VALUES(groupName)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"groupID", titleData.groupID);
                                    command.Parameters.AddWithValue($"groupName", titleData.groupName);
                                    await command.ExecuteNonQueryAsync();
                                }

                                success = true;
                            }
                            break;
                        }

                    default:
                        logger.LogWarning($"DB Update not Implemented for {table.ToString()}");
                        break;
                }

                return success;

            }
            catch (MySqlException ex) { return false; }
            catch (Exception ex) { return false; }
        }
        private async Task<bool> UpdateSteam(Tables table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;
                switch (table)
                {
                    case Tables.SteamAppIDs:
                        {
                            if (data is SteamUpdateScannedData updateData)
                            {


                                string sqlQuery = $@"Update {Schemas.steam}.{table.To_String()}
                                 set lastScanned = @lastScanned 
                                 where appID = @appID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"appID", updateData.ID);
                                    command.Parameters.AddWithValue($"lastScanned", updateData.lastScanned);
                                    await command.ExecuteNonQueryAsync();
                                }

                                success = true;
                            }
                            break;
                        }

                    default:
                        logger.LogWarning($"DB Update not Implemented for {table.ToString()}");
                        break;
                }

                return success;

            }
            catch (MySqlException ex) { return false; }
            catch (Exception ex) { return false; }
        }
        private async Task<bool> UpdateGameMarket(Tables table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;
                switch (table)
                {
                    case Tables.GameMarketGameTitles:
                        {
                            if (data is GameMarketMergedXboxData mergedData)
                            {

                                string sqlQuery = $@"Update {Schemas.gamemarket}.{table.To_String()}
                                 set gameTitle = @gameTitle 
                                 where gameID = @gameID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"gameTitle", mergedData.gameTitle);
                                    command.Parameters.AddWithValue($"gameID", mergedData.gameId);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case Tables.GameMarketXboxLink:
                        {
                            if (data is GameMarketMergedXboxData mergedData)
                            {

                                string sqlQuery = $@"Update {Schemas.gamemarket}.{table.To_String()}
                                 set groupID =@groupID
                                 where gameID = @gameID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"groupID", mergedData.groupID);
                                    command.Parameters.AddWithValue($"gameID", mergedData.groupID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }

                    default:
                        logger.LogWarning($"DB Update not Implemented for {table.ToString()}");
                        break;
                }

                return success;

            }
            catch (MySqlException ex) { return false; }
            catch (Exception ex) { return false; }
        }

        #endregion




        #region TableClass


        private async Task<bool> InsertIntoTableAsync(DBTable table, ITableData data, MySqlConnection connection)
        {

            //using var transaction = await connection.BeginTransactionAsync();
            bool success = false;
            try
            {
                if (!await validTableAsync(table))
                {
                    //await transaction.RollbackAsync();
                    Console.WriteLine("Table not valid for insertion");
                    return false;
                }
                switch (table.getSchema())
                {
                    case XboxSchema:
                        success = await InsertXbox(table, data, connection);
                        break;
                    case SteamSchema:
                        success = await InsertSteam(table, data, connection);
                        break;
                    case GameMarketSchema:
                        success = await InsertGameMarket(table, data, connection);
                        break;
                    default:
                        break;
                }

                // await transaction.CommitAsync();
                return success;
            }
            catch (MySqlException ex)
            {
                Console.WriteLine("Failed to insert for: ");
                data.outputData();
                // Console.WriteLine("Sql Error: " + ex.ToString());
                return false;
            }
            catch (Exception ex)
            {
                // If something goes wrong, roll back the transaction
                //await transaction.RollbackAsync();
                Console.WriteLine(ex.ToString());
                throw;
            }
        }

        private async Task<bool> UpdateTableAsync(DBTable table, ITableData data, MySqlConnection connection)
        {
            //using var transaction = await connection.BeginTransactionAsync();
            bool success = false;
            try
            {

                if (!await validTableAsync(table))
                {
                    //await transaction.RollbackAsync();
                    return success;
                }

                switch (table.getSchema())
                {
                    case XboxSchema:
                        success = await UpdateXbox(table, data, connection);
                        break;
                    case SteamSchema:
                        success = await UpdateSteam(table, data, connection);
                        break;
                    case GameMarketSchema:
                        success = await UpdateGameMarket(table, data, connection);
                        break;
                    default:
                        break;
                }
                // await transaction.CommitAsync();
                return success;
            }
            catch (MySqlException ex)
            {
                Console.WriteLine("Update failed for: ");
                data.outputData();
                return false;
            }
            catch (Exception ex)
            {
                // If something goes wrong, roll back the transaction
                //await transaction.RollbackAsync();
                Console.WriteLine(ex.ToString());

                throw;
            }
        }



        private async Task<bool> InsertXbox(DBTable table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;
                switch (table)
                {
                    case XboxSchema.UserProfilesTable:
                        {
                            break;
                        }
                    case XboxSchema.GameTitlesTable:
                        {
                            var GameTitles = Database_structure.Xbox.GameTitles;
                            if (data is XboxGameTitleData titleData)
                            {

                                string sqlQuery = $@"INSERT INTO  {table.fullPath()} 
                                 ({GameTitles.titleID.getName()}, {GameTitles.titleName.getName()}, {GameTitles.displayImage.getName()}, {GameTitles.modernTitleID.getName()}, {GameTitles.isGamePass.getName()}) 
                                 VALUES(@{GameTitles.titleID.getName()}, @{GameTitles.titleName.getName()}, @{GameTitles.displayImage.getName()}, @{GameTitles.modernTitleID.getName()}, @{GameTitles.isGamePass.getName()}) 
                                 ON DUPLICATE KEY UPDATE {GameTitles.titleName.getName()} = VALUES({GameTitles.titleName.getName()}), {GameTitles.displayImage.getName()} = VALUES({GameTitles.displayImage.getName()}), 
                                 {GameTitles.modernTitleID.getName()}=VALUES({GameTitles.modernTitleID.getName()}), {GameTitles.isGamePass.getName()} = VALUES({GameTitles.isGamePass.getName()})";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"{GameTitles.titleID.getName()}", titleData.titleID);
                                    command.Parameters.AddWithValue($"{GameTitles.titleName.getName()}", titleData.titleName);
                                    command.Parameters.AddWithValue($"{GameTitles.displayImage.getName()}", titleData.displayImage);
                                    command.Parameters.AddWithValue($"{GameTitles.modernTitleID.getName()}", titleData.modernTitleID);
                                    command.Parameters.AddWithValue($"{GameTitles.isGamePass.getName()}", titleData.isGamePass);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.TitleDevicesTable:
                        {
                            var TitleDevices = Database_structure.Xbox.TitleDevices;
                            if (data is XboxGameTitleData titleData)
                            {

                                //Delete all devices for id
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from  {table.fullPath()} where {TitleDevices.modernTitleID.getName()} = @{TitleDevices.modernTitleID.getName()}";
                                    command.Parameters.AddWithValue($"{TitleDevices.modernTitleID.getName()}", titleData.modernTitleID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({TitleDevices.modernTitleID.getName()}, {TitleDevices.device.getName()}) 
                                 VALUES(@{TitleDevices.modernTitleID.getName()}, @{TitleDevices.device.getName()}) 
                                 ON DUPLICATE KEY UPDATE {TitleDevices.modernTitleID.getName()} = VALUES({TitleDevices.modernTitleID.getName()}), {TitleDevices.device.getName()} = VALUES({TitleDevices.device.getName()})";

                                foreach (var device in titleData.devices)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{TitleDevices.modernTitleID.getName()}", titleData.modernTitleID);
                                        command.Parameters.AddWithValue($"{TitleDevices.device.getName()}", device);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.ProductIDsTable:
                        {
                            var ProductIDs = Database_structure.Xbox.ProductIDs;
                            if (data is XboxTitleDetailsData titleData)
                            {
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({ProductIDs.productID.getName()}) 
                                 VALUES(@{ProductIDs.productID.getName()}) 
                                 ON DUPLICATE KEY UPDATE {ProductIDs.productID.getName()} = VALUES({ProductIDs.productID.getName()})";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"{ProductIDs.productID.getName()}", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }

                                foreach (var bundleID in titleData.bundleIDs)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;
                                        command.Parameters.AddWithValue($"{ProductIDs.productID.getName()}", titleData.productID);
                                        command.Parameters.AddWithValue($"{ProductIDs.productID.getName()}", bundleID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.TitleDetailsTable:
                        {
                            var TitleDetails = Database_structure.Xbox.TitleDetails;
                            if (data is XboxTitleDetailsData titleData)
                            {
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({TitleDetails.modernTitleID.getName()}, {TitleDetails.productID.getName()}) 
                                 VALUES(@{TitleDetails.modernTitleID.getName()}, @{TitleDetails.productID.getName()}) 
                                 ON DUPLICATE KEY UPDATE {TitleDetails.modernTitleID.getName()} = VALUES({TitleDetails.modernTitleID.getName()}), {TitleDetails.productID.getName()} = VALUES({TitleDetails.productID.getName()})";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"{TitleDetails.modernTitleID.getName()}", titleData.modernTitleID);
                                    command.Parameters.AddWithValue($"{TitleDetails.productID.getName()}", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.GameBundlesTable:
                        {
                            var GameBundles = Database_structure.Xbox.GameBundles;
                            if (data is XboxTitleDetailsData titleData)
                            {
                                //remove all bundles for ID
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {table.fullPath()} where {GameBundles.productID.getName()} = @{GameBundles.productID.getName()}";

                                    command.Parameters.AddWithValue($"{GameBundles.productID.getName()}", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({GameBundles.relatedProductID.getName()}, {GameBundles.productID.getName()}) 
                                 VALUES(@{GameBundles.relatedProductID.getName()}, @{GameBundles.productID.getName()}) On Duplicate key update {GameBundles.productID.getName()} = Values({GameBundles.productID.getName()})";

                                //insert new bundles
                                foreach (var bundleID in titleData.bundleIDs)
                                {

                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{GameBundles.relatedProductID.getName()}", bundleID);
                                        command.Parameters.AddWithValue($"{GameBundles.productID.getName()}", titleData.productID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.GameGenresTable:
                        {
                            var GameGenres = Database_structure.Xbox.GameGenres;
                            if (data is XboxTitleDetailsData titleData)
                            {
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 () 
                                 VALUES(@productID) 
                                 ON DUPLICATE KEY UPDATE productID = VALUES(productID)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }

                                foreach (var bundleID in titleData.bundleIDs)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"productID", bundleID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.GroupDataTable:
                        {
                            var GroupData = Database_structure.Xbox.GroupData;
                            if (data is XboxTitleDetailsData titleData)
                            {

                                string sqlQuery = $@"INSERT INTO {table.fullPath()}
                                 ({GroupData.groupID.getName()}, {GroupData.groupName.getName()}) 
                                 VALUES(@{GroupData.groupID.getName()}, @{GroupData.groupName.getName()}) 
                                 ON DUPLICATE KEY UPDATE {GroupData.groupName.getName()} = VALUES({GroupData.groupName.getName()})";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"{GroupData.groupID.getName()}", titleData.groupID);
                                    command.Parameters.AddWithValue($"{GroupData.groupName.getName()}", titleData.groupName);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.MarketDetailsTable:
                        {
                            var MarketDetails = Database_structure.Xbox.MarketDetails;
                            if (data is XboxGameMarketData marketData)
                            {
                                string productIDString = MarketDetails.productID.getName(), 
                                    productTitleString = MarketDetails.productTitle.getName(),
                                    developerNameString = MarketDetails.developerName.getName(),
                                    publisherNameString = MarketDetails.publisherName.getName(),
                                    currencyCodeString = MarketDetails.currencyCode.getName(),
                                    purchasableString = MarketDetails.purchasable.getName(),
                                    posterImageString = MarketDetails.posterImage.getName(),
                                    msrpString = MarketDetails.msrp.getName(),
                                    listPriceString = MarketDetails.listPrice.getName(),
                                    startDateString = MarketDetails.startDate.getName(),
                                    endDateString = MarketDetails.endDate.getName();

                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({productIDString}, {productTitleString}, {developerNameString}, {publisherNameString}, {currencyCodeString}, {purchasableString}, {posterImageString}, {msrpString}, {listPriceString}, {startDateString}, {endDateString}) 
                                 VALUES(@{productIDString},@{productTitleString}, @{developerNameString},@{publisherNameString},@{currencyCodeString},@{purchasableString},@{posterImageString},@{msrpString},@{listPriceString},@{startDateString},@{endDateString}) 
                                 ON DUPLICATE KEY UPDATE {productTitleString} = VALUES({productTitleString}), 
                                 {developerNameString} = VALUES({developerNameString}), {publisherNameString} = VALUES({publisherNameString}), {currencyCodeString} = VALUES({currencyCodeString}), {purchasableString} = VALUES({purchasableString}), 
                                 {posterImageString} = VALUES({posterImageString}), {msrpString} = VALUES({msrpString}), {listPriceString} = VALUES({listPriceString}), {startDateString} = VALUES({startDateString}), {endDateString} = VALUES({endDateString})";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;


                                    //They should all have this
                                    command.Parameters.AddWithValue($"{productIDString}", marketData.productID);
                                    command.Parameters.AddWithValue($"{productTitleString}", marketData.productTitle);
                                    command.Parameters.AddWithValue($"{developerNameString}", marketData.devName);
                                    command.Parameters.AddWithValue($"{publisherNameString}", marketData.pubName);
                                    command.Parameters.AddWithValue($"{startDateString}", marketData.startDate);
                                    command.Parameters.AddWithValue($"{endDateString}", marketData.endDate);
                                    command.Parameters.AddWithValue($"{purchasableString}", marketData.purchasable);
                                    command.Parameters.AddWithValue($"{posterImageString}", marketData.posterImage);

                                    if (marketData.purchasable)
                                    {
                                        command.Parameters.AddWithValue($"{msrpString}", marketData.msrp);
                                        command.Parameters.AddWithValue($"{listPriceString}", marketData.ListPrice);
                                        command.Parameters.AddWithValue($"{currencyCodeString}", marketData.currencyCode);
                                    }
                                    else
                                    {
                                        command.Parameters.AddWithValue($"{msrpString}", null);
                                        command.Parameters.AddWithValue($"{listPriceString}", null);
                                        command.Parameters.AddWithValue($"{currencyCodeString}", null);
                                    }

                                    await command.ExecuteNonQueryAsync();
                                }

                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.ProductPlatformsTable:
                        {
                            var ProductPlatforms = Database_structure.Xbox.ProductPlatforms;
                            if (data is XboxGameMarketData titleData)
                            {
                                string productIDString = ProductPlatforms.productID.getName(), 
                                    platformString = ProductPlatforms.platform.getName();
                                //remove all bundles for ID
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {table.fullPath()} where {productIDString} = @{productIDString}";

                                    command.Parameters.AddWithValue($"{productIDString}", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({productIDString}, {platformString}) 
                                 VALUES(@{productIDString}, @{platformString}) On Duplicate key update {platformString} = Values({platformString})";

                                //insert new bundles
                                foreach (var platform in titleData.platforms)
                                {

                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{platformString}", platform);
                                        command.Parameters.AddWithValue($"{productIDString}", titleData.productID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }


                    default:
                        logger.LogWarning($"DB insert not Implemented for {table.fullPath()}");
                        break;

                }

                return success;
            }
            catch (MySqlException ex) { logger.LogWarning(ex.ToString()); return false; }
        }
        private async Task<bool> InsertSteam(DBTable table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;
                switch (table)
                {
                    case SteamSchema.AppIDsTable:
                        {
                            if (data is SteamAppListData appListData)
                            {
                                var AppIDs = Database_structure.Steam.AppIDs;
                                string sqlQuery = $@"INSERT INTO {table.fullPath()}
                                 ({AppIDs.appID.getName()}) 
                                 VALUES(@{AppIDs.appID.getName()}) 
                                 ON DUPLICATE KEY UPDATE {AppIDs.appID.getName()} = VALUES({AppIDs.appID.getName()})";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"{AppIDs.appID.getName()}", appListData.appid);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case SteamSchema.AppDetailsTable:
                        {
                            var AppDetails = Database_structure.Steam.AppDetails;
                            if (data is SteamAppDetailsData appDetailsData)
                            {
                                
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({AppDetails.appID.getName()}, {AppDetails.appType.getName()},{AppDetails.appName.getName()},{AppDetails.msrp.getName()},{AppDetails.listPrice.getName()},{AppDetails.isFree.getName()}) 
                                 VALUES(@{AppDetails.appID.getName()}, @{AppDetails.appType.getName()},@{AppDetails.appName.getName()},@{AppDetails.msrp.getName()},@{AppDetails.listPrice.getName()},@isFree) 
                                 ON DUPLICATE KEY UPDATE {AppDetails.appType.getName()} = VALUES({AppDetails.appType.getName()}), {AppDetails.appName.getName()} = VALUES({AppDetails.appName.getName()}), 
                                    {AppDetails.msrp.getName()} = VALUES({AppDetails.msrp.getName()}), {AppDetails.listPrice.getName()} = VALUES({AppDetails.listPrice.getName()}), {AppDetails.isFree.getName()} = VALUES({AppDetails.isFree.getName()})  ";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"{AppDetails.appID.getName()}", appDetailsData.appID);
                                    command.Parameters.AddWithValue($"{AppDetails.appType.getName()}", appDetailsData.appType);
                                    command.Parameters.AddWithValue($"{AppDetails.appName.getName()}", appDetailsData.appName);
                                    if (!appDetailsData.isFree)
                                    {
                                        command.Parameters.AddWithValue($"{AppDetails.listPrice.getName()}", appDetailsData.listprice);
                                        command.Parameters.AddWithValue($"{AppDetails.msrp.getName()}", appDetailsData.msrp);
                                    }
                                    else
                                    {
                                        command.Parameters.AddWithValue($"{AppDetails.listPrice.getName()}", null);
                                        command.Parameters.AddWithValue($"{AppDetails.msrp.getName()}", null);
                                    }
                                    command.Parameters.AddWithValue($"{AppDetails.isFree.getName()}", appDetailsData.isFree);

                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case SteamSchema.PackageIDsTable:
                        {
                            var PackageIDs = Database_structure.Steam.PackageIDs;
                            if (data is SteamAppDetailsData appDetailsData)
                            {
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({PackageIDs.packageID.getName()}) 
                                 VALUES(@{PackageIDs.packageID.getName()}) 
                                 ON DUPLICATE KEY UPDATE {PackageIDs.packageID.getName()} = VALUES({PackageIDs.packageID.getName()})";

                                foreach (var package in appDetailsData.packages)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{PackageIDs.packageID.getName()}", package);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case SteamSchema.PackagesTable:
                        {
                            var Packages = Database_structure.Steam.Packages;
                            if (data is SteamAppDetailsData appDetailsData)
                            {

                                //remove all packages for ID
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {table.fullPath()} where {Packages.appID.getName()} = @{Packages.appID.getName()}";

                                    command.Parameters.AddWithValue($"{Packages.appID.getName()}", appDetailsData.appID);
                                    await command.ExecuteNonQueryAsync();
                                }

                                string sqlQuery = $@"INSERT INTO {table.fullPath()}
                                 ({Packages.appID.getName()}, {Packages.packageID.getName()}) 
                                 VALUES(@{Packages.appID.getName()}, @{Packages.packageID.getName()}) 
                                 ON DUPLICATE KEY UPDATE {Packages.appID.getName()} = VALUES({Packages.appID.getName()})";

                                foreach (var package in appDetailsData.packages)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{Packages.appID.getName()}", appDetailsData.appID);
                                        command.Parameters.AddWithValue($"{Packages.packageID.getName()}", package);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }

                                success = true;
                            }
                            break;
                        }
                    case SteamSchema.AppDevelopersTable:
                        {
                            var AppDevelopers = Database_structure.Steam.AppDevelopers;
                            if (data is SteamAppDetailsData appDetailsData)
                            {
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({AppDevelopers.appID.getName()}, {AppDevelopers.developer.getName()}) 
                                 VALUES(@{AppDevelopers.appID.getName()}, @{AppDevelopers.developer.getName()}) 
                                 ON DUPLICATE KEY UPDATE {AppDevelopers.appID.getName()} = VALUES({AppDevelopers.appID.getName()}), {AppDevelopers.developer.getName()} = Values({AppDevelopers.developer.getName()})";

                                foreach (var developer in appDetailsData.developers)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{AppDevelopers.appID.getName()}", appDetailsData.appID);
                                        command.Parameters.AddWithValue($"{AppDevelopers.developer.getName()}", developer);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case SteamSchema.AppPublishersTable:
                        {
                            var AppPublishers = Database_structure.Steam.AppPublishers;
                            if (data is SteamAppDetailsData appDetailsData)
                            {
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({AppPublishers.appID.getName()}, {AppPublishers.publisher.getName()}) 
                                 VALUES(@{AppPublishers.appID.getName()}, @{AppPublishers.publisher.getName()}) 
                                 ON DUPLICATE KEY UPDATE {AppPublishers.appID.getName()} = VALUES({AppPublishers.appID.getName()}), {AppPublishers.publisher.getName()} = Values({AppPublishers.publisher.getName()})";

                                foreach (var developer in appDetailsData.developers)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{AppPublishers.appID.getName()}", appDetailsData.appID);
                                        command.Parameters.AddWithValue($"{AppPublishers.publisher.getName()}", developer);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case SteamSchema.AppPlatformsTable:
                        {
                            var AppPlatforms = Database_structure.Steam.AppPlatforms;
                            if (data is SteamAppDetailsData appDetailsData)
                            {

                                //remove all packages for ID
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {table.fullPath()} where {AppPlatforms.appID.getName()} = @{AppPlatforms.appID.getName()}";
                                    command.Parameters.AddWithValue($"{AppPlatforms.appID.getName()}", appDetailsData.appID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 ({AppPlatforms.appID.getName()}, {AppPlatforms.platform.getName()}) 
                                 VALUES(@{AppPlatforms.appID.getName()}, @{AppPlatforms.platform.getName()}) 
                                 ON DUPLICATE KEY UPDATE {AppPlatforms.appID.getName()} = VALUES({AppPlatforms.appID.getName()}), {AppPlatforms.platform.getName()} = VAlUES({AppPlatforms.platform.getName()})";

                                foreach (var platform in appDetailsData.platforms)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{AppPlatforms.appID.getName()}", appDetailsData.appID);
                                        command.Parameters.AddWithValue($"{AppPlatforms.platform.getName()}", platform);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case SteamSchema.AppGenresTable:
                        {
                            var AppGenres = Database_structure.Steam.AppGenres;
                            if (data is SteamAppDetailsData appDetailsData)
                            {
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {table.fullPath()}  where {AppGenres.appID.getName()} = @{AppGenres.appID.getName()}";

                                    command.Parameters.AddWithValue($"{AppGenres.appID.getName()}", appDetailsData.appID);
                                    await command.ExecuteNonQueryAsync();
                                }

                                string sqlQuery = $@"INSERT INTO {table.fullPath()}
                                 ({AppGenres.appID.getName()}, {AppGenres.genre.getName()}) 
                                 VALUES(@{AppGenres.appID.getName()}, @{AppGenres.genre.getName()}) 
                                 ON DUPLICATE KEY UPDATE {AppGenres.appID.getName()} = VALUES({AppGenres.appID.getName()}), {AppGenres.genre.getName()} = VALUES({AppGenres.genre.getName()})";

                                foreach (var genre in appDetailsData.genres)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{AppGenres.appID.getName()}", appDetailsData.appID);
                                        command.Parameters.AddWithValue($"{AppGenres.genre.getName()}", genre);

                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }

                    default:
                        logger.LogWarning($"DB insert not Implemented for {table.ToString()}");
                        break;
                }



                return success;

            }
            catch (MySqlException ex) { return false; }
        }
        private async Task<bool> InsertGameMarket(DBTable table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;

                switch (table)
                {
                    case GameMarketSchema.GameTitlesTable:
                        {
                            var GameTitles = Database_structure.GameMarket.gameTitles;
                            if (data is GameMarketMergedData mergedData)
                            {

                                string sqlQuery = $@"INSERT INTO {table.fullPath()}
                                 ({GameTitles.gameTitle.getName()}) 
                                 VALUES(@{GameTitles.gameTitle.getName()});
                                 SELECT LAST_INSERT_ID();";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;
                                    command.Parameters.AddWithValue($"{GameTitles.gameTitle.getName()}", mergedData.gameTitle);
                                    var result = await command.ExecuteScalarAsync();
                                    mergedData.updateGameID(Convert.ToUInt32(result));
                                }
                                success = true;
                            }

                            
                            break;
                        }

                    case GameMarketSchema.XboxLinkTable:
                        {
                            if (data is GameMarketMergedData mergedData)
                            {
                                var XboxLink = Database_structure.GameMarket.xboxLink;
                                //check to see if it has ids
                                if (!mergedData.platformIds.TryGetValue(table.getSchema(), out var Ids))
                                {
                                    break;
                                }
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {table.fullPath()} where {XboxLink.gameID.getName()} = @{XboxLink.gameID.getName()}";

                                    command.Parameters.AddWithValue($"{XboxLink.gameID.getName()}", mergedData.getGameID());
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery1 = $@"INSERT INTO {table.fullPath()}
                                 ({XboxLink.gameID.getName()}, {XboxLink.modernTitleID.getName()}) 
                                 VALUES(@{XboxLink.gameID.getName()}, @{XboxLink.modernTitleID.getName()})";

                                foreach (var titleId in mergedData.xboxIds)
                                {
                                    if (mergedData.getGameID() >= 1000)
                                    {
                                        using (var command = new MySqlCommand())
                                        {
                                            command.Connection = connection;
                                            command.CommandText = sqlQuery1;
                                            command.Parameters.AddWithValue($"{XboxLink.gameID.getName()}", mergedData.getGameID());
                                            command.Parameters.AddWithValue($"{XboxLink.modernTitleID.getName()}", titleId);
                                            await command.ExecuteNonQueryAsync();
                                        }
                                    }
                                    else
                                    {
                                        logger.LogWarning($"{XboxLink.gameID.getName()} is not valid for {table.fullPath()}");
                                    }

                                }
                                success = true;
                            }
                            break;
                        }
                    case GameMarketSchema.SteamLinkTable:
                        {
                            if (data is GameMarketMergedData mergedData)
                            {
                                var SteamLink = Database_structure.GameMarket.steamLink;
                                //check to see if it has ids
                                if (!mergedData.platformIds.TryGetValue(table.getSchema(), out var Ids))
                                {
                                    break;
                                }
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {table.fullPath()} where = @gameId";

                                    command.Parameters.AddWithValue($"gameId", mergedData.getGameID());
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery1 = $@"INSERT INTO {table.fullPath()}
                                 (gameID, modernTitleID) 
                                 VALUES(@gameID, @modernTitleID)";

                                foreach (var titleId in mergedData.xboxIds)
                                {
                                    if (mergedData.getGameID() >= 1000)
                                    {
                                        using (var command = new MySqlCommand())
                                        {
                                            command.Connection = connection;
                                            command.CommandText = sqlQuery1;
                                            command.Parameters.AddWithValue($"gameID", mergedData.getGameID());
                                            command.Parameters.AddWithValue($"modernTitleID", titleId);
                                            await command.ExecuteNonQueryAsync();
                                        }
                                    }
                                    else
                                    {
                                        logger.LogWarning($"GameID is not valid for {table.fullPath()}");
                                    }

                                }
                                success = true;
                            }
                            break;
                        }

                    case GameMarketSchema.DevelopersTable:
                        {
                            if (data is GameMarketMergedData mergedData)
                            {
                                var Developers = Database_structure.GameMarket.developers;
                                string sqlQuery = $@"INSERT INTO {table.fullPath()}
                                 ({Developers.gameID.getName()}, {Developers.developer.getName()}) 
                                 VALUES(@{Developers.gameID.getName()}, @{Developers.developer.getName()})";

                                foreach(var developer in mergedData.developers ?? [])
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{Developers.gameID.getName()}", mergedData.getGameID());
                                        command.Parameters.AddWithValue($"{Developers.developer.getName()}", developer);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }

                    case GameMarketSchema.PublishersTable:
                        {
                            if (data is GameMarketMergedData mergedData)
                            {
                                var Publishers = Database_structure.GameMarket.publishers;
                                string sqlQuery = $@"INSERT INTO {table.fullPath()}
                                 ({Publishers.gameID.getName()}, {Publishers.publisher.getName()}) 
                                 VALUES(@{Publishers.gameID.getName()}, @{Publishers.publisher.getName()})";
                                foreach(var publisher in mergedData.publishers ?? [])
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"{Publishers.gameID.getName()}", mergedData.getGameID());
                                        command.Parameters.AddWithValue($"{Publishers.publisher.getName()}", publisher);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }

                    default:
                        logger.LogWarning($"DB insert not Implemented for {table.fullPath}");
                        break;
                }


                return success;

            }
            catch (MySqlException ex) { logger.LogWarning(ex.ToString()); return false; }
        }


        private async Task<bool> UpdateXbox(DBTable table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;
                switch (table)
                {
                    case XboxSchema.UserProfilesTable:
                        {
                            if (data is XboxUpdateScannedData updateData)
                            {
                                var tableCommand = new MySqlCommand("Use " + sqlserverSettings.xboxSchema + ";", connection);
                                await tableCommand.ExecuteNonQueryAsync();

                                string sqlQuery = $@"Update {table.fullPath()}
                                 set lastScanned = @lastScanned 
                                 where xuid = @xuid";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"xuid", updateData.ID);
                                    command.Parameters.AddWithValue($"lastScanned", updateData.lastScanned);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }

                            break;
                        }
                    case XboxSchema.GameTitlesTable:
                        {
                            if (data is XboxTitleDetailsData titleDetailsData)
                            {
                                string sqlQuery = $@"Update {table.fullPath()} 
                                 set groupID = @groupID, lastScanned = @lastScanned 
                                 where modernTitleID = @modernTitleID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"groupID", titleDetailsData.groupID);
                                    command.Parameters.AddWithValue($"modernTitleID", titleDetailsData.modernTitleID);
                                    command.Parameters.AddWithValue($"lastScanned", titleDetailsData.lastScanned);

                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            else if (data is XboxUpdateScannedData updateData)
                            {

                                string sqlQuery = $@"Update {table.fullPath()}
                                 set lastScanned = @lastScanned 
                                 where modernTitleID = @modernTitleID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"modernTitleID", updateData.ID);
                                    command.Parameters.AddWithValue($"lastScanned", updateData.lastScanned);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.ProductIDsTable:
                        {
                            if (data is XboxUpdateScannedData updateData)
                            {
                                string sqlQuery = $@"Update {table.fullPath()} 
                                     set lastScanned = @lastScanned
                                     where productID = @productID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"productID", updateData.ID);
                                    command.Parameters.AddWithValue($"lastScanned", updateData.lastScanned);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.TitleDetailsTable:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {
                                string sqlQuery = $@"Update {table.fullPath()}
                                     set productID = @productID 
                                     where modernTitleID = @modernTitleID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"modernTitleID", titleData.modernTitleID);
                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.GameBundlesTable:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {
                                //remove all bundles for ID
                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = $@"Delete from {table.fullPath()} where productID = @productID";

                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                string sqlQuery = @"INSERT INTO {table.fullPath()} 
                                 (relatedProductID, productID) 
                                 VALUES(@relatedProductID, @productID) ";

                                //insert new bundles
                                foreach (var bundleID in titleData.bundleIDs)
                                {

                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;

                                        command.Parameters.AddWithValue($"relatedProductID", bundleID);
                                        command.Parameters.AddWithValue($"productID", titleData.productID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.GameGenresTable:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {
                                string sqlQuery = $@"INSERT INTO {table.fullPath()} 
                                 (productID) 
                                 VALUES(@productID) 
                                 ON DUPLICATE KEY UPDATE productID = VALUES(productID)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"productID", titleData.productID);
                                    await command.ExecuteNonQueryAsync();
                                }

                                foreach (var bundleID in titleData.bundleIDs)
                                {
                                    using (var command = new MySqlCommand())
                                    {
                                        command.Connection = connection;
                                        command.CommandText = sqlQuery;
                                        command.Parameters.AddWithValue($"productID", bundleID);
                                        await command.ExecuteNonQueryAsync();
                                    }
                                }
                                success = true;
                            }
                            break;
                        }
                    case XboxSchema.GroupDataTable:
                        {
                            if (data is XboxTitleDetailsData titleData)
                            {

                                string sqlQuery = $@"INSERT INTO {table.fullPath()}
                                 (groupID, groupName) 
                                 VALUES(@groupID, @groupName) 
                                 ON DUPLICATE KEY UPDATE groupName = VALUES(groupName)";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"groupID", titleData.groupID);
                                    command.Parameters.AddWithValue($"groupName", titleData.groupName);
                                    await command.ExecuteNonQueryAsync();
                                }

                                success = true;
                            }
                            break;
                        }

                    default:
                        logger.LogWarning($"DB Update not Implemented for {table.ToString()}");
                        break;
                }

                return success;

            }
            catch (MySqlException ex) { return false; }
            catch (Exception ex) { return false; }
        }
        private async Task<bool> UpdateSteam(DBTable table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;
                switch (table)
                {
                    case SteamSchema.AppIDsTable:
                        {
                            if (data is SteamUpdateScannedData updateData)
                            {


                                string sqlQuery = $@"Update {table.fullPath()}
                                 set lastScanned = @lastScanned 
                                 where appID = @appID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"appID", updateData.ID);
                                    command.Parameters.AddWithValue($"lastScanned", updateData.lastScanned);
                                    await command.ExecuteNonQueryAsync();
                                }

                                success = true;
                            }
                            break;
                        }

                    default:
                        logger.LogWarning($"DB Update not Implemented for {table.ToString()}");
                        break;
                }

                return success;

            }
            catch (MySqlException ex) { return false; }
            catch (Exception ex) { return false; }
        }
        private async Task<bool> UpdateGameMarket(DBTable table, ITableData data, MySqlConnection connection)
        {
            try
            {
                bool success = false;
                switch (table)
                {
                    case GameMarketSchema.GameTitlesTable:
                        {
                            if (data is GameMarketMergedXboxData mergedData)
                            {

                                string sqlQuery = $@"Update {table.fullPath()}
                                 set gameTitle = @gameTitle 
                                 where gameID = @gameID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"gameTitle", mergedData.gameTitle);
                                    command.Parameters.AddWithValue($"gameID", mergedData.gameId);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }
                    case GameMarketSchema.XboxLinkTable:
                        {
                            if (data is GameMarketMergedXboxData mergedData)
                            {

                                string sqlQuery = $@"Update {table.fullPath()}
                                 set groupID =@groupID
                                 where gameID = @gameID";

                                using (var command = new MySqlCommand())
                                {
                                    command.Connection = connection;
                                    command.CommandText = sqlQuery;

                                    command.Parameters.AddWithValue($"groupID", mergedData.groupID);
                                    command.Parameters.AddWithValue($"gameID", mergedData.groupID);
                                    await command.ExecuteNonQueryAsync();
                                }
                                success = true;
                            }
                            break;
                        }

                    default:
                        logger.LogWarning($"DB Update not Implemented for {table.ToString()}");
                        break;
                }

                return success;

            }
            catch (MySqlException ex) { return false; }
            catch (Exception ex) { return false; }
        }


        #endregion 








        public async Task<bool> validTableAsync(DBTable table)
        {
            if (foundTables1.Exists(x => x == table))
            {
                return true;
            }
            else
            {
                if (await TableExistsAsync(table))
                {
                    foundTables1.Add(table);
                    return true;
                }
                else
                    return false;
            }
        }
        public async Task<bool> validTableAsync(Tables table)
        {
            if (foundTables.Exists(x => x == table))
            {
                return true;
            }
            else
            {
                if (await TableExistsAsync(table))
                {
                    foundTables.Add(table);
                    return true;
                }
                else
                    return false;
            }
        }

        private async Task<bool> TableExistsAsync(DBTable table)
        {
            try
            {
                int schemaNum = -1;
                string sqlQuery = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = @databaseName AND table_name = @tableName";

                //Check to see if the table exists in the db
                using (var connection = new MySqlConnection(connectionString))
                {
                    await connection.OpenAsync();
                    using (var command = new MySqlCommand(sqlQuery, connection))
                    {
                        command.Parameters.AddWithValue($"@databaseName", table.getSchema().getName());
                        command.Parameters.AddWithValue($"@tableName", table.getName());

                        var result = await command.ExecuteScalarAsync();
                        if (Convert.ToInt32(result) > 0)
                        {
                            logger.LogDebug($"Found {table.getName()} in the Database");
                            return true;
                        }

                    }
                }



                string sqlFilePath = "";
                switch (table)
                {
                    //xbox
                    case XboxSchema.GameBundlesTable:
                        sqlFilePath = "create xboxgamebundles.sql";
                        break;

                    case XboxSchema.GameTitlesTable:
                        sqlFilePath = "create xboxgametitles.sql";
                        break;

                    case XboxSchema.GroupDataTable: //groupdata
                        sqlFilePath = "create xboxgroupdata.sql";
                        break;

                    case XboxSchema.MarketDetailsTable:
                        sqlFilePath = "create xboxmarketdetails.sql";
                        break;

                    case XboxSchema.ProductIDsTable: //productids
                        sqlFilePath = "create xboxproductID.sql";
                        break;

                    case XboxSchema.ProductPlatformsTable:
                        sqlFilePath = "create xboxproductplatforms.sql";
                        break;

                    case XboxSchema.TitleDetailsTable:
                        sqlFilePath = "create xboxtitledetails.sql";
                        break;

                    case XboxSchema.TitleDevicesTable:
                        sqlFilePath = "create xboxtitledevices.sql";
                        break;

                    case XboxSchema.UserProfilesTable:
                        sqlFilePath = "create xboxuserprofiles.sql";
                        break;


                    //steam
                    case SteamSchema.AppDetailsTable:
                        sqlFilePath = "create steamappdetails.sql";
                        break;
                    case SteamSchema.AppDevelopersTable:
                        sqlFilePath = "create steamappdevelopers.sql";
                        break;
                    case SteamSchema.AppGenresTable:
                        sqlFilePath = "create steamappgenres.sql";
                        break;
                    case SteamSchema.AppIDsTable:
                        sqlFilePath = "create steamappids.sql";
                        break;
                    case SteamSchema.AppPlatformsTable:
                        sqlFilePath = "create steamappplatforms.sql";
                        break;
                    case SteamSchema.AppPublishersTable:
                        sqlFilePath = "create steamapppublishers.sql";
                        break;
                    case SteamSchema.PackageDetailsTable:
                        sqlFilePath = "create steampackagedetails.sql";
                        break;
                    case SteamSchema.PackageIDsTable:
                        sqlFilePath = "create steampackageids.sql";
                        break;
                    case SteamSchema.PackagesTable:
                        sqlFilePath = "create steampackages.sql";
                        break;


                    //gamemarket
                    case GameMarketSchema.DevelopersTable:
                        sqlFilePath = "create gamemarketdevelopers.sql";
                        break;
                    case GameMarketSchema.GameTitlesTable:
                        sqlFilePath = "create gamemarkettitles.sql";
                        break;
                    case GameMarketSchema.PublishersTable:
                        sqlFilePath = "create gamemarketpublishers.sql";
                        break;
                    case GameMarketSchema.XboxLinkTable:
                        sqlFilePath = "create gamemarketxboxlink.sql";
                        break;
                    case GameMarketSchema.SteamLinkTable:
                        sqlFilePath = "create gamemarketsteamlink.sql";
                        break;
                    default:
                        sqlFilePath = "";
                        break;
                }

                sqlFilePath = sqlFilePath == "" ? "" : $"sqlQueries/{table.getSchema().getName()}/{sqlFilePath}";

                if (sqlFilePath != "")
                {
                    if (await executeSQLFile(sqlFilePath))
                    {
                        logger.LogDebug($"Created {table.fullPath}\n\n");
                        return true;
                    }
                    else
                    {
                        logger.LogWarning($"Could not create {table.fullPath}");
                    }
                }
                Console.WriteLine("Invalid SQL FilePath");
                return false;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.ToString());
                return false;
            }
        }
        private async Task<bool> TableExistsAsync(Tables table)
        {
            int schemaNum = -1;
            string sqlQuery = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = @databaseName AND table_name = @tableName";

            string tableEnum = table.ToString().ToLower();

            if (tableEnum.Contains("xbox")) schemaNum = (int)Schemas.xbox;
            else if (tableEnum.Contains("steam")) schemaNum = (int)Schemas.steam;
            else if (tableEnum.Contains("gamemarket")) schemaNum = (int)Schemas.gamemarket;
            //find the schema of the table



            //Check to see if the table exists in the db
            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(sqlQuery, connection))
                {
                    switch (schemaNum)
                    {
                        case (int)Schemas.xbox:
                            command.Parameters.AddWithValue($"@databaseName", Schemas.xbox.ToString());
                            break;
                        case (int)Schemas.steam:
                            command.Parameters.AddWithValue($"@databaseName", Schemas.steam.ToString());
                            break;
                        case (int)Schemas.gamemarket:
                            command.Parameters.AddWithValue($"@databaseName", Schemas.gamemarket.ToString());
                            break;
                        default:
                            command.Parameters.AddWithValue($"@databaseName", Schemas.xbox.ToString());
                            break;
                    }

                    command.Parameters.AddWithValue($"@tableName", TablesExtension.To_String(table));

                    var result = await command.ExecuteScalarAsync();
                    if (Convert.ToInt32(result) > 0)
                    {
                        Console.WriteLine("Found " + table.To_String() + " in the Database");
                        return true;
                    }

                }
            }



            string sqlFilePath = "";
            switch (table)
            {
                case Tables.XboxUserProfiles:
                    sqlFilePath = "sqlQueries/create xboxuserprofiles.sql";
                    break;
                case Tables.XboxGameTitles:
                    sqlFilePath = "sqlQueries/create xboxgametitles.sql";
                    break;
                case Tables.XboxGameBundles:
                    sqlFilePath = "sqlQueries/create xboxgamebundles.sql";
                    break;
                case Tables.XboxProductIds:
                    sqlFilePath = "sqlQueries/create xboxproductID.sql";
                    break;
                case Tables.XboxGameGenres:
                    sqlFilePath = "sqlQueries/create xboxgamegenres.sql";
                    break;
                case Tables.XboxTitleDetails:
                    sqlFilePath = "sqlQueries/create xboxtitledetails.sql";
                    break;
                case Tables.XboxMarketDetails:
                    sqlFilePath = "sqlQueries/create xboxmarketdetails.sql";
                    break;
                case Tables.XboxGroupData:
                    sqlFilePath = "sqlQueries/create xboxgroupdata.sql";
                    break;
                case Tables.XboxTitleDevices:
                    sqlFilePath = "sqlQueries/create xboxtitledevices.sql";
                    break;


                //steam
                case Tables.SteamAppIDs:
                    sqlFilePath = "sqlQueries/create steamappids.sql";
                    break;
                case Tables.SteamAppGenres:
                    sqlFilePath = "sqlQueries/create steamappgenres.sql";
                    break;
                case Tables.SteamAppDetails:
                    sqlFilePath = "sqlQueries/create steamappdetails.sql";
                    break;
                case Tables.SteamAppDevelopers:
                case Tables.SteamAppPublishers:
                    sqlFilePath = "sqlQueries/create steamappdev-pub.sql";
                    break;
                case Tables.SteamAppPlatforms:
                    sqlFilePath = "sqlQueries/create steamappplatforms.sql";
                    break;
                case Tables.SteamPackageDetails:
                    sqlFilePath = "sqlQueries/create steampackegedetails.sql";
                    break;
                case Tables.SteamPackageIDs:
                    sqlFilePath = "sqlQueries/create steampackageids.sql";
                    break;
                case Tables.SteamPackages:
                    sqlFilePath = "sqlQueries/create steampackages.sql";
                    break;


                case Tables.GameMarketGameTitles:
                    sqlFilePath = "sqlQueries/create gamemarkettitles.sql";
                    break;
                case Tables.GameMarketXboxLink:
                    sqlFilePath = "sqlQueries/create gamemarketxboxlink.sql";
                    break;
                default:
                    sqlFilePath = "";
                    break;
            }



            if (sqlFilePath != "")
            {
                if (await executeSQLFile(sqlFilePath))
                {
                    Console.WriteLine("Created " + table.To_String() + "\n\n");
                    return true;
                }
                else
                {
                    Console.WriteLine("could not create " + table.To_String());
                }
            }
            Console.WriteLine("Invalid SQL FilePath");
            return false;
        }
        private async Task<bool> executeSQLFile(string filePath)
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
                using var transaction = await connection.BeginTransactionAsync();
                try
                {
                    List<string> sqlQueries = Tools.ReadFromSQLFile(filePath);



                    foreach (var querie in sqlQueries)
                    {
                        using (var command = new MySqlCommand(querie, connection, transaction))
                        {
                            await command.ExecuteNonQueryAsync();
                        }
                    }

                    await transaction.CommitAsync();
                    if (sqlserverSettings.outputSettings.outputDebug)
                        logger.LogWarning("Sql Ran Successfully");
                    return true;
                }
                catch (MySqlException)
                {
                    logger.LogError("Error executing sql");
                    transaction.Rollback();
                    return false;
                }
                catch
                {
                    transaction.Rollback();
                    return false;
                }
            }


        }

    }
}
